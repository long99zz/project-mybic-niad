package handlers
import (
    "github.com/gin-gonic/gin"
    "golang.org/x/crypto/bcrypt"
    "net/http"
    "gorm.io/gorm"
    "backend/models"
	"github.com/golang-jwt/jwt/v5"
    "time"
    "os"

)
func GenerateToken(userID uint, role string) (string, error) {
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
        "user_id": userID,
        "role":    role,
        "exp":     time.Now().Add(24 * time.Hour).Unix(), // Token h·∫øt h·∫°n sau 24h
    })

    secretKey := os.Getenv("JWT_SECRET") // üî• L·∫•y secret t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    return token.SignedString([]byte(secretKey))
}

func RegisterUser(db *gorm.DB) gin.HandlerFunc {
    return func(c *gin.Context) {
        var user models.User
        if err := c.ShouldBindJSON(&user); err != nil {
            c.JSON(http.StatusBadRequest, gin.H{"error": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!"})
            return
        }

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        var existingUser models.User
        if err := db.Where("email = ?", user.Email).First(&existingUser).Error; err == nil {
            c.JSON(http.StatusConflict, gin.H{"error": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!"})
            return
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        hashedPassword, _ := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
        user.Password = string(hashedPassword)

        // Ki·ªÉm tra quy·ªÅn h·ª£p l·ªá
        if user.Role != "Admin" && user.Role != "Customer" {
            c.JSON(http.StatusBadRequest, gin.H{"error": "Quy·ªÅn kh√¥ng h·ª£p l·ªá!"})
            return
        }

        // L∆∞u v√†o database
        db.Create(&user)

        // T·∫°o token JWT ngay sau khi ƒëƒÉng k√Ω
        token, err := GenerateToken(user.ID, user.Role)
        if err != nil {
            c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ t·∫°o token!"})
            return
        }

        c.JSON(http.StatusCreated, gin.H{"message": "ƒêƒÉng k√Ω th√†nh c√¥ng!", "token": token})
    }
}


func LoginUser(db *gorm.DB) gin.HandlerFunc {
    return func(c *gin.Context) {
        var input struct {
            Email    string `json:"email"`
            Password string `json:"password"`
        }

        if err := c.ShouldBindJSON(&input); err != nil {
            c.JSON(http.StatusBadRequest, gin.H{"error": "Th√¥ng tin kh√¥ng h·ª£p l·ªá!"})
            return
        }

        var user models.User
        if err := db.Where("email = ?", input.Email).First(&user).Error; err != nil {
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Email kh√¥ng t·ªìn t·∫°i!"})
            return
        }

        if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(input.Password)); err != nil {
            c.JSON(http.StatusUnauthorized, gin.H{"error": "M·∫≠t kh·∫©u sai!"})
            return
        }

        // T·∫°o token JWT
        token, err := GenerateToken(user.ID, user.Role)
        if err != nil {
            c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ t·∫°o token!"})
            return
        }

        c.JSON(http.StatusOK, gin.H{"message": "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", "token": token, "role": user.Role})
    }
}
func GetUserInfo(db *gorm.DB) gin.HandlerFunc {
    return func(c *gin.Context) {
        userID, exists := c.Get("user_id")
        if !exists {
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi d√πng!"})
            return
        }

        var user models.User
        if err := db.First(&user, userID).Error; err != nil {
            c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!"})
            return
        }

        c.JSON(http.StatusOK, gin.H{
            "user_id":     user.ID,
            "first_name":  user.FirstName,
            "last_name":   user.LastName,
            "email":       user.Email,
            "phone":       user.Phone,
            "citizen_id":  user.CitizenID,
            "gender":      user.Gender,
            "date_of_birth": user.DateOfBirth,
            "province":    user.Province,
            "city":        user.City,
            "district":    user.District,
            "sub_district": user.SubDistrict,
            "house_number": user.HouseNumber,
            "role":        user.Role,
        })
    }
}